schema {
  query: RootQuery
  mutation: RootMutation
  subscription: RootSubscription
}

type Car {
  id: ID!
  plate: String!
  brand: String!
  createdBy: ID!
  createdAt: DateTime!
  updatedAt: DateTime
}

"""A connection to a list of items."""
type CarConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CarEdge]
  count: Int
}

"""An edge in a connection."""
type CarEdge {
  """The item at the end of the edge"""
  node: Car

  """A cursor for use in pagination"""
  cursor: String!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the
`date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO
8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type LoginPayload {
  token: String
  error: String
  user: User
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

"""Root Mutation"""
type RootMutation {
  login(email: String!, password: String!): LoginPayload
  signup(email: String!, password: String!, passwordConfirmation: String!, name: String!): LoginPayload
  addCar(plate: String!, brand: String!): Car
  removeCar(id: ID!): Car
}

"""Root Query"""
type RootQuery {
  car(id: ID): Car
  allCars(after: String, first: Int, before: String, last: Int): CarConnection
}

"""Root Subscription"""
type RootSubscription {
  newCar: Car
  removedCar: Car
}

type User {
  id: ID!
  name: String!
  email: String!
  createdAt: DateTime!
  updatedAt: DateTime
  avatarUrl: String
}
